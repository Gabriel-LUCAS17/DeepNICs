# -*- coding: utf-8 -*-
"""
Program: countTrainingSamples.py
Description: count number of ROP-Training samples.
Author: Mathieu Brunner.
"""

#%% Modules importation.
import csv
import glob
import numpy as np
import os

#%% Utils.

def deleteSolutions(path) :
    """
    Delete solution files generated by rop execution.

    Parameters :
        path : string. Path for folder containing eventual solution files.

    Return :
        no return.
    """

    pattern = path + "/*_sol.csv"
    listSolFiles = glob.glob(pattern)
    for file in listSolFiles :
        os.remove(file)

#%% Functions definition.

def getCountMatrix(trainingPath, width, height) :
    """
    Returns matrix containing rate of trained samples for each configuration.

    Parameters :
        trainingPath : string. Path for folder containing ROP-Training samples.
        width, height : integer. Width and height of generated ROP-Images.

    Returns :
        countMatrix : numpy array. Matrix containing rate of trained samples for each
            configuration.

    """

    # Initialization of countMatrix.
    res = np.zeros((height, width))

    # Filling countMatrix.
    for i in range(width) : # Range of simulation range.
        for j in range(height) : # Number of selected variables.
            filesPath = trainingPath + "R" + str(i+3) + "/V" + str(j+3)

            # Delete solution files.
            deleteSolutions(filesPath)

            resPattern = filesPath + "/*_res.csv"
            listFiles = os.listdir(filesPath) # List of files.
            listResFiles = glob.glob(resPattern) # List of result files.
            N_Files = len(listFiles)
            N_ResFiles = len(listResFiles)
            if N_Files == 0 : res[height - j - 1][i] = 0 # Case of an empty folder.
            else : res[height - j - 1][i] = (2*N_ResFiles) / N_Files

    return res

def countTrainingSamples(trainingPath, resFile, width, height) :
    """
    Writes countMatrix in .csv file.

    Parameters :
        trainingPath : string. Path for folder containing ROP-Training samples.
        resFile : string. Path for .csv file to write.
        width, height : integer. Width and height of generated ROP-Images.

    Returns :
        no return.
    """

    # Getting countMatrix.
    countMatrix = getCountMatrix(trainingPath, width, height)

    # Writing countMatrix into .csv file.
    with open(resFile, "w", newline='', encoding='latin1') as file :
        writer = csv.writer(file, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)

        # Writing row for each variable.
        for i in range(countMatrix.shape[0]) :
            writer.writerow(countMatrix[i,:])

        file.close()

#%% Main function.

# Parallelizable function. One processor for each stratified variable.
def computeTrainingSamples(var, data_path, count_path, width, height) :
    """
    Calls countTrainingSamples for given stratified variable.

    Parameters :
        var : integer. Id of stratified variable.
        data_path : string. Path for folder containing ROP-Training samples.
        count_path : string. Path for folder containing count .csv files.
        width, height : integer. Width and height of generated ROP-Images.

    Returns :
        no return.
    """

    dataPath = data_path + "a" + str(var) + "/"
    resFile = count_path + "a" + str(var) + ".csv"
    countTrainingSamples(dataPath, resFile, width, height)

